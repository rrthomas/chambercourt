name: Build release

on:
  push:
    tags:
      - "v*"

jobs:
  source-release:
    name: Make source release
    runs-on: ubuntu-20.04
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install non-Python build dependencies
        run: sudo apt-get -y install gettext
      - name: Install Python dependencies
        run: pip install tox build aenum pygame i18nparse importlib-resources typing-extensions platformdirs pyscroll pytmx
      - name: Build
        run: make dist
      - name: Make the release
        run: gh release create ${{ github.ref_name }} --title "Release ${{ github.ref_name}}" dist/*

  binary-release:
    name: Make binary release
    needs: source-release
    strategy:
      matrix:
        # Use oldest available macOS and Ubuntu for greatest compatibility
        # of resulting binary.
        os: [ubuntu-20.04, macos-13, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install non-Python build dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: sudo apt-get -y install gettext
      - name: Install non-Python build dependencies (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          nuget install Gettext.Tools -Version 0.22.4 -OutputDirectory c:\nuget;
          Add-Content $env:GITHUB_PATH "C:\nuget\Gettext.Tools.0.22.4\tools\bin";
          nuget install Magick.NET-Q16-AnyCPU -Version 14.3.0 -OutputDirectory c:\nuget;
          Add-Content $env:GITHUB_PATH "C:\nuget\Magic.NET-Q16-AnyCPU.14.3.0\tools\bin"
      - name: Install Python dependencies
        run: pip install tox build setuptools aenum pygame i18nparse importlib-resources typing-extensions platformdirs pyscroll pytmx
      - name: Install additional dependencies for binary builds
        run: pip install pyinstaller
      - name: Build
        run: make dist
      - name: Build the executable (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          PYTHONPATH=. pyinstaller --noconfirm --onefile --windowed --name chambercourt-${{ runner.os }}-${{ runner.arch }} --copy-metadata chambercourt --add-data "chambercourt/*.png:chambercourt/" --add-data "chambercourt/*.ttf:chambercourt/" --add-data "chambercourt/levels:chambercourt/levels" --add-data "chambercourt/locale:chambercourt/locale" chambercourt/__main__.py
          ./dist/chambercourt-${{ runner.os }}-${{ runner.arch }} --help
      - name: Build the executable (macOS)
        if: ${{ matrix.os == 'macos-13' || matrix.os == 'macos-latest' }}
        run: |
          ./make-macos-icns ./chambercourt/levels/Hero.png chambercourt.iconset
          pyi-makespec --windowed --name chambercourt --icon chambercourt.icns --copy-metadata chambercourt --add-data "chambercourt/*.png:chambercourt/" --add-data "chambercourt/*.ttf:chambercourt/" --add-data "chambercourt/levels:chambercourt/levels" --add-data "chambercourt/locale:chambercourt/locale" chambercourt/__main__.py
          export version=$(grep version pyproject.toml)
          sed -i '' -e "s/\(name='chambercourt.app'\)/\1,\n    $version/" chambercourt.spec
          PYTHONPATH=. pyinstaller --noconfirm chambercourt.spec
          brew install create-dmg
          mkdir dmg-folder
          mv dist/chambercourt.app dmg-folder/
          create-dmg --volname "chambercourt ${{ github.ref_name }}" ./dist/chambercourt-${{ runner.os }}-${{ runner.arch }}.dmg dmg-folder/
      - name: Build the executable (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          pip install cx_Freeze
          convert chambercourt/app-icon.png app-icon.ico
          cxfreeze bdist_msi
      - name: Upload the binary (Ubuntu and macOS)
        if: ${{ matrix.os != 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          tag: ${{ github.ref }}
          file: ./dist/chambercourt-${{ runner.os }}-${{ runner.arch }}*
          file_glob: true
      - name: Upload the binary (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          tag: ${{ github.ref }}
          file: ./dist/chambercourt*.msi
          file_glob: true
